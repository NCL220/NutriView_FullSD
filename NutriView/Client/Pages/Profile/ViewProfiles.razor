@page "/viewprofiles"
@inject HttpClient _client
@inject IJSRuntime js
@using NutriView.Shared.Domain
<head>
    <style>
        body {
            margin: 0;
            background: linear-gradient(to right, #3498db, #e74c3c);
            display: flex;
            flex-wrap: wrap;
            flex-direction: column;
        }

        .topcontainer {
            text-align: center;
            height: auto;
        }

        .searchbar {
            width:auto;
            align-items: center;
            border-radius: 20px;
            outline:none;
        }

        .bordercontainer {
            width: 250px;
            height: 275px;
            border: 5px solid black;
            padding: 20px;
            margin:20px;
            text-align: center;
            background-color:aliceblue;
            border-radius: 10px; /* rounded corners */
        }

            .bordercontainer img {
                width: 90%;
                height: 200px;
                border-radius: 15px; /* Match the border-radius to the outer container */
                object-fit: cover;
            }
        .profilecontainer{
            display: flex;
            flex-direction: row;
            flex-grow: 1; /* Take up the remaining vertical space */
            flex-wrap: wrap;
            gap: 10px;
            padding: 10px;
            overflow-y: auto;
        }


    </style>
</head>

<body>
    <div class="topcontainer">
        <h1 style="align-items:center">Customer Database</h1>
        <div class="searchbar">
            <input type="text" placeholder="Search..." @bind="searchterm" style="border-radius: 20px" />
                <button type="submit" style="border-radius: 20px">
                    <span class="oi oi-magnifying-glass"></span>
                </button>
        </div>
    </div>

    <div class="profilecontainer">
        @if(FilteredCustomer is not null)
        {
            @foreach (var customer in FilteredCustomer)
            {
                <div class="bordercontainer">
                    @if (customer.ImageBytes != null && customer.ImageBytes.Length > 0)
                    {
                        <img src="@($"data:image/png;base64,{Convert.ToBase64String(customer.ImageBytes)}")" alt="Image">
                    }
                    else
                    {
                        <img src="Images/Defaultimg.jpg" class="card-img" alt="Image">
                    }
                    <a href="/profile/view/@customer.Id" style="margin-top: auto">
                        View @customer.UserName
                    </a>
                </div>
            }
        }
        else
        {
            
        }
    </div>

</body>

@code{
    private List<Customer>? Customers;
    private string searchterm = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Customers = await _client.GetFromJsonAsync<List<Customer>>("api/Customers");
            if (Customers is null)
            {
                Customers = new List<Customer>(); // Initialize to an empty list if null is returned
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
    private List<Customer> FilteredCustomer
    {
        get{
            if(Customers is not null)
            {
                return Customers.Where(c => c.UserName.ToLower().Contains(searchterm.ToLower())).ToList();
            }
            else
            {
                return null;
            }
        }
        
    }

}