@page "/profile/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@using NutriView.Shared.Domain;
@layout NoMenuLayout
<head>
    <style>
        body {
            margin: 0;
            background-color: #10889E;
            font-family: Verdana;
            flex-direction:column;
        }

        .container {
            margin-top:4%;
            display: flex;
            height:98%;
            width: 98%;
            background-color: antiquewhite;
        }
        .left-column{
            flex: 1;
            padding: 50px;
            border: 1px solid #ccc;
        }

            .left-column img {
                width: 100%;
                height: auto;
                border-radius: 15px; /* Match the border-radius to the outer container */
                object-fit: cover;
            }
        .right-column {
            flex: 3;
            padding: 20px;
            border: 1px solid #ccc;
        }
        h1 {
            text-align: center;
            font-size: 3em;
            color: #445566;
            font-family: Georgia, Times, Serif;
            font-weight: normal;
            margin: 0;
            padding: 20px;
        }

        h2 {
            color: #445566;
            padding: 0px;
        }

        h3 {
            color: #445566;
            margin: 0px;
        }

        nav {
            background-color: #45bcd2;
            height: 30px;
            margin-bottom: 20px;
            text-align: center;
        }

        aside {
            margin:auto;
            width: 300px;
            height:100%;
            border: 1px solid #10889E;
            float: left;
            margin-left: 30px;
            padding: 5px;
        }


        #main {
            width: 75%;
            float: right;
            margin-right: 30px;
            line-height: 20px;
        }
        table{
          width:100%;
          table-layout: fixed;
          background-color:black;
        }
        .tbl-header{
          background-color: aqua;
         }
        .tbl-content{
          height:300px;
          overflow-x:auto;
          margin-top: 0px;
          border: 2px solid aqua;
          
        }
        th{
          padding: 20px 15px;
          text-align: left;
          font-weight: 500;
          font-size: 12px;
          color: ghostwhite;
          text-transform: uppercase;
        }
        td{
          padding: 15px;
          text-align: left;
          vertical-align:middle;
          font-weight: 300;
          font-size: 12px;
          color: forestgreen;
          border: 2px solid aqua;
        }

        .card-img{
            width:270px;
            height:280px;
        }

    </style>
    <script>
        function NoPass() {
            alert("Subscribe to unlock this feature");
        }
    </script>
</head>

<body>

    @if (customer is not null)
    {
        <div class='container'>
            <div class="left-column">

                <h1>
                    Profile : @customer.UserName
                </h1>

                @if (subscriptions is not null)
                {
                    foreach (var subscribe in subscriptions.Where(s => s.CustomerID == customer.Id).OrderByDescending(s => s.DateCreated).Take(1))
                    {
                        if (subscriptioninfos is not null)
                        {
                            foreach (var subinfo in subscriptioninfos.Where(si => si.Id == subscribe.SubInfoID))
                            {
                                <p>Subscriber: @subinfo.SubTierName</p>
                            }
                        }
                    }
                }
                @if (customer.ImageBytes != null && customer.ImageBytes.Length > 0)
                {
                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(customer.ImageBytes)}")" alt="Image">
                }
                else
                {
                    <img src="Images/Defaultimg.jpg" class="card-img" alt="Image">
                }
                <ul>
                    <li>Age: @customer.Age</li>
                    <li>Height : @customer.Height</li>
                    <li>Gender: @customer.Gender</li>
                    <li>Acc Created: @customer.DateCreated</li>
                    <li>Email: @customer.Email</li>
                    @if (nutritionalquotas is not null)
                    {
                        var currentnutquota = nutritionalquotas.Where(nq => nq.CustomerID == customer.Id).OrderByDescending(nq => nq.DateUpdated).Take(1);
                        if(currentnutquota.Any())
                        {
                            foreach(var nutquota in currentnutquota)
                            {
                                <li>Target BMI : @nutquota.TargetBMI</li>
                                <li>Target Daily Intake Calories : @nutquota.TargetCalorieDaily</li>
                                <li>Target Daily Intake Carbohydrates : @nutquota.TargetCarbDaily</li>
                                <a href="/PersonalNutritionalQuotas/edit/@nutquota.Id" class="btn btn-primary">Edit Quota</a>
                            }

                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="ServiceIDCheckForNutriQuota">Create Quota</button>
                        }

                    }
                    else
                    {
                        
                    }


                </ul>
            </div>

            <div class="right-column">
                <h1>Food Entries</h1>
                <div class="tbl-header">
                    <table cellpadding="0" cellspacing="0" border="0">
                        <thead>
                            <tr>
                                <th>Time Stamp</th>
                                <th>Total Calories</th>
                                <th>Foods</th>
                                <th>Meals</th>
                                <th>PortionSizes</th>
                                <th>Time Periods</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                    </table>
                </div>
                
                @if (foodEntries is not null)
                {
                    <div class="tbl-content">
                        <table cellpadding="0" cellspacing="0" border="0">
                            <tbody>
                                @foreach (var foodentry in foodEntries.Where(FoodEntry => FoodEntry.CustomerID == customer.Id))
                                {
                                    <tr>  
                                        <td>@foodentry.Time_Stamp</td>
                                        <td>@foodentry.TotalCalories</td>
                                        @if (entrylinkfoods is not null)
                                        {
                                            <td>
                                                @foreach (var foodinfoodentries in entrylinkfoods.Where(ffe => ffe.FoodEntryID == foodentry.Id))
                                                {
                                                    @if (foods is not null)
                                                    {
                                                        @foreach (var food in foods.Where(fd => fd.Id == foodinfoodentries.FoodID))
                                                        {
                                                            <li>@food.Name</li>
                                                        }
                                                        

                                                    }
                                                }

                                            </td>
                                        }
                                        @if(meals is not null)
                                        {
                                                @foreach (var meal in meals.Where(m => m.FoodEntryID == foodentry.Id))
                                                {
                                                    <td>@meal.Name</td>
                                                    <td>@meal.PortionSize</td>
                                                    <td>@meal.TimePeriod</td>
                                                    <td>
                                                        <button class="btn btn-primary" @onclick="() => EditMeal(meal.Id)">Edit Meal</button>
                                                    </td>
                                            }
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <a href="/entryLinkFoods/create" class="btn btn-secondary">
                                                Add More Food
                                            </a>
                }

        </div>

        </div>
     }
</body>


@code {
    [Parameter] public int id { get; set; }
    Customer? customer = new Customer();
    private List<Meal>? meals;
    private List<Customer>? customers;
    private List<FoodEntry>? foodEntries;
    private List<NutritionalQuota>? nutritionalquotas;
    private List<Subscription>? subscriptions;
    private List<SubscriptionInfo>? subscriptioninfos;
    private List<EntryLinkFood>? entrylinkfoods;
    private List<Food>? foods;
    private List<ServiceLinkSubInfo>? servicelinksubinfos;
    private List<Service>? services;
    public int ServiceIDForNutriQuota = 2; //Service ID is 2 (Which allow User to use NutriQuota) (Adminstrator Only)

    [Parameter] public EventCallback<double> OnInputChange { get; set; }

    protected async override Task OnInitializedAsync()
    {
        customer = await
        _client.GetFromJsonAsync<Customer>($"{Endpoints.CustomersEndpoint}/{id}");
        try
        {
            servicelinksubinfos = await _client.GetFromJsonAsync<List<ServiceLinkSubInfo>>($"{Endpoints.ServicesEndpoint}");
            if (servicelinksubinfos is null)
            {
                servicelinksubinfos = new List<ServiceLinkSubInfo>(); // Initialize to an empty list if null is returned
            }
            services = await _client.GetFromJsonAsync<List<Service>>($"{Endpoints.ServicesEndpoint}");
            if (services is null)
            {
                services = new List<Service>(); // Initialize to an empty list if null is returned
            }


            foods = await _client.GetFromJsonAsync<List<Food>>($"{Endpoints.FoodsEndpoint}");
            if (foods is null)
            {
                foods = new List<Food>(); // Initialize to an empty list if null is returned
            }
            entrylinkfoods = await _client.GetFromJsonAsync<List<EntryLinkFood>>($"{Endpoints.EntryLinkFoodsEndpoint}");
            if (entrylinkfoods is null)
            {
                entrylinkfoods = new List<EntryLinkFood>(); // Initialize to an empty list if null is returned
            }
            subscriptioninfos = await _client.GetFromJsonAsync<List<SubscriptionInfo>>($"{Endpoints.SubscriptionInfosEndpoint}");
            if (subscriptioninfos is null)
            {
                subscriptioninfos = new List<SubscriptionInfo>(); // Initialize to an empty list if null is returned
            }
            subscriptions = await _client.GetFromJsonAsync<List<Subscription>>($"{Endpoints.SubscriptionsEndpoint}");
            if (subscriptions is null)
            {
                subscriptions = new List<Subscription>(); // Initialize to an empty list if null is returned
            }
            customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
            if (customers is null)
            {
                customers = new List<Customer>(); // Initialize to an empty list if null is returned
            }
            meals = await _client.GetFromJsonAsync<List<Meal>>($"{Endpoints.MealsEndpoint}");
            if (meals is null)
            {
                meals = new List<Meal>(); // Initialize to an empty list if null is returned
            }
            foodEntries = await _client.GetFromJsonAsync<List<FoodEntry>>($"{Endpoints.FoodEntriesEndpoint}");
            if (foodEntries is null)
            {
                foodEntries = new List<FoodEntry>(); // Initialize to an empty list if null is returned
            }
            nutritionalquotas = await _client.GetFromJsonAsync<List<NutritionalQuota>>($"{Endpoints.NutritionalQuotasEndpoint}");
            if (nutritionalquotas is null)
            {
                nutritionalquotas = new List<NutritionalQuota>(); // Initialize to an empty list if null is returned
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }


    // private void NavigateToCreatePage()
    // {
    //     ServiceIDCheckForNutriQuota();
    //     // Pass data as a query parameter in the URL
    //     _navManager.NavigateTo($"/PersonalNutritionalQuotas/create/{id}");
    // }
    private void EditMeal(int mealId)
    {
        _navManager.NavigateTo($"/meals/edit/{mealId}");
    }

    private void ServiceIDCheckForNutriQuota()
    {

        if (customer is not null)
        {

            var subscription = subscriptions.Where(s => s.CustomerID == customer.Id).OrderByDescending(s => s.DateCreated).FirstOrDefault();
            if (subscription is not null)
            {
                var sinfo = subscriptioninfos.Where(si => si.Id == subscription.SubInfoID).FirstOrDefault();
                if (sinfo is not null)
                {
                    var LinkServSubInfo = servicelinksubinfos.Where(sl => sl.SubscriptionInfoID == sinfo.Id).ToList(); // ToList() to materialize the collection

                    if (LinkServSubInfo is not null)
                    {
                        foreach (var l in LinkServSubInfo)
                        {
                            if (ServiceIDForNutriQuota == l.ServiceID)
                            {
                                _navManager.NavigateTo($"/PersonalNutritionalQuotas/create/{id}");
                            }
                        }
                        }
                    }
                }
            
        }


    }

}