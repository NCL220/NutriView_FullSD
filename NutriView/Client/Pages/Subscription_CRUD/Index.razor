@page "/subscriptions"
@inject NavigationManager NavigationManager
@inject HttpClient _client
@inject IJSRuntime js
@using NutriView.Shared.Domain
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3>Subscriptions</h3>
<a href="/subscriptions/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Subscriptions
</a>
@if (Subscriptions is null)
{
    <p><em>Loading...</em></p>
}
else if (Subscriptions.Count == 0)
{
    <p>No subscriptions found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Customer ID</th>
                <th>Subscription Choice ID</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var Subscription in Subscriptions)
            {
                <tr>
                    <td>@Subscription.CustomerID</td>
                    <td>@Subscription.SubInfoID</td>
                    <td>@Subscription.DateStart.ToString("yyyy-MM-dd")</td>
                    <td>@Subscription.DateEnd.ToString("yyyy-MM-dd")</td>
                    <td>
                        <a href="/Subscriptions/edit/@Subscription.Id" class="btn btn-primary">Edit</a>
                        <button class="btn btn-danger" @onclick="() => Delete(Subscription.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Subscription>? Subscriptions;

    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
            Subscriptions = await _client.GetFromJsonAsync<List<Subscription>>("api/Subscriptions");
            if (Subscriptions is null)
            {
                Subscriptions = new List<Subscription>(); // Initialize to an empty list if null is returned
            }

    }

    private void EditSubscription(int subscriptionId)
    {
        NavigationManager.NavigateTo($"/edit-subscription/{subscriptionId}");
    }

    private async Task Delete(int subscriptionId)
    {
        if (Subscriptions is null) return; // Guard clause for null 'Subscriptions'

        var Subscription = Subscriptions.FirstOrDefault(c => c.Id == subscriptionId);
        if (Subscription != null && await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Subscription.Id}?"))
        {
            try
            {
                await _client.DeleteAsync($"api/Subscriptions/{subscriptionId}");
                Subscriptions.Remove(Subscription);
                StateHasChanged(); // Refresh the UI
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting Subscription: {ex.Message}");
                // Handle the error, e.g., show a message to the user
            }
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
