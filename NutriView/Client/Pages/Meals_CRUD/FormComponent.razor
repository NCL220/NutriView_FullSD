@using NutriView.Shared.Domain
@inject HttpClient _client
@using System.Collections;

<EditForm Model="@meal" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="meal.Name" />
        <ValidationMessage For="@(() => meal.Name)" />
    </div>

    

    <div class="form-group">
        <label for="portionSize">Portion Size:</label>
        <InputNumber id="portionSize" class="form-control" @bind-Value="meal.PortionSize" />
        <ValidationMessage For="@(() => meal.PortionSize)" />
    </div>

    <div class="form-group">
        <label for="timePeriod">Time Period:</label>
        <InputText id="timePeriod" class="form-control" @bind-Value="meal.TimePeriod" />
        <ValidationMessage For="@(() => meal.TimePeriod)" />
    </div>
    <div class="form-group" @oninput="HandleMealCaloriesChanges">
        <label for="calories">Meal Calories:</label>
        <InputNumber id="calories" class="form-control" @bind-Value="meal.Calories" />
        <ValidationMessage For="@(() => meal.Calories)" />
    </div>
    @if (SubmitDataThroughForm)
    {
        
    }
    else
    {
        <div class="form-group">
            <label>
                FoodEntry;
            </label>
            <div>
                <InputSelect @bind-Value="meal.FoodEntryID" class="form-control">
                    <option value="">--Select foodentry--</option>
                    @if (FoodEntries != null)
                    {
                        foreach (var FE in FoodEntries)
                        {
                            <option value="@FE.Id">@FE.Id</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>
        <button type="submit" class="btn btn-success">@ButtonText</button>
    }
</EditForm>

@code {
    [Parameter] public Meal? meal { get; set; } = new Meal();
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool SubmitDataThroughForm { get; set; }
    

    private IList<FoodEntry>? FoodEntries;
    private double inputmealcalValue;
    [Parameter] public EventCallback<double> OnInputChange { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FoodEntries = await _client.GetFromJsonAsync<List<FoodEntry>>($"{Endpoints.FoodEntriesEndpoint}");
    }

    private async Task HandleMealCaloriesChanges(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double parsedmealcal))
        {
            inputmealcalValue = parsedmealcal;
            await OnInputChange.InvokeAsync(inputmealcalValue);
        }
        else
        {
            // Handle invalid input if needed
        }
    }
}
