@using NutriView.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@staff" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
	<div class="form-group">
		<label>
			Company:
		</label>
		<div>
			<InputSelect @bind-Value="staff.CompanyId" class="form-control">
				<option value="">--Select Company--</option>
				@if(Companies != null)
				{
					foreach(var company in Companies)
					{
						<option value="@company.Id">@company.CompanyName</option>
					}
				}
			</InputSelect>
		</div>
	</div>
	<div class="form-group">
		<label>Name: </label>
		<div>
			<InputText @bind-Value="staff.UserName" class="form-control" />
			<ValidationMessage For="@(() => staff.UserName)" />
		</div>
	</div>
	<div class="form-group">
		<label>Role: </label>
		<div>
			<InputText @bind-Value="staff.Role" class="form-control" />
			<ValidationMessage For="@(() => staff.Role)" />
		</div>
	</div>
	<div class="form-group">
		<label>Password: </label>
		<div>
			<InputText @bind-Value="staff.Password" class="form-control" />
			<ValidationMessage For="@(() => staff.Password)" />
		</div>
	</div>
	<div class="form-group">
		<label>Email: </label>
		<div>
			<InputText @bind-Value="staff.Email" class="form-control" />
			<ValidationMessage For="@(() => staff.Email)" />
		</div>
	</div>
	<div class="form-group">
		<label>PhoneNumber: </label>
		<div>
			<InputNumber @bind-Value="staff.PhoneNumber" class="form-control" />
			<ValidationMessage For="@(() => staff.PhoneNumber)" />
		</div>
	</div>
	<div class="form-group">
		<label>ImagePath: </label>
		<div>
			<InputText @bind-Value="staff.ImagePathStaff" class="form-control" />
			<ValidationMessage For="@(() => staff.ImagePathStaff)" />
		</div>
        </div>
    </fieldset>
	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}
	
	<BackToList Target="staffs" />
</EditForm>
@code {
		[Parameter] public bool Disabled { get; set; } = false;
        [Parameter] public Staff? staff { get; set; }
        [Parameter] public string ButtonText { get; set; } = "Save";
        [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Company>? Companies;

    protected async override Task OnInitializedAsync()
    {
        Companies = await _client.GetFromJsonAsync<List<Company>>($"{Endpoints.CompaniesEndpoint}");
    }
    
}