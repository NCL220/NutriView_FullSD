@using NutriView.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@foodEntry" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />



    <div class="form-group">
        <label for="timeStamp">Time Stamp:</label>
        <InputDate id="timeStamp" class="form-control" @bind-Value="foodEntry.Time_Stamp" />
        <ValidationMessage For="@(() => foodEntry.Time_Stamp)" />
    </div>


    <div class="form-group">
        <label for="customer">Customer:</label>
        <InputSelect id="customer" class="form-control" @bind-Value="foodEntry.CustomerID">
            <option value="">-- Select Customer --</option>
            @if (Customers != null)
            {
                foreach (var customer in Customers)
                {
                    <option value="@customer.Id">@customer.UserName</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => foodEntry.CustomerID)" />
    </div>

    @if (SubmitDataThroughForm)
    {
        <div class="form-group">
            <label for="totalCalories">Total Calories:</label>
            <textarea id="totalCalories" class="form-control" @bind="foodEntry.TotalCalories" readonly />
        </div>
    }
    else
    {    
        <div class="form-group">
            <label for="totalCalories">Total Calories:</label>
            <InputNumber id="totalCalories" class="form-control" @bind-Value="foodEntry.TotalCalories" />
            <ValidationMessage For="@(() => foodEntry.TotalCalories)" />
        </div>
        <button type="submit" class="btn btn-success">
            @ButtonText
            </button>
    }
</EditForm>

@code {
    [Parameter] public FoodEntry? foodEntry { get; set; } = new FoodEntry();
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;

    [Parameter] public bool SubmitDataThroughForm { get; set; }
    private IList<Customer>? Customers;

    protected override async Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
}
