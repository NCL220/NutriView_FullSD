@using NutriView.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@subscription" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
		<div class="form-group">
			<label>
				SubTier:
			</label>
			<div>
				<InputSelect @bind-Value="subscription.SubInfoID" @onchange="OnSubInfoIDChanged" class="form-control">
					<option value="">--Select Subscription Info--</option>
					@if (SubscriptionInfos != null)
					{
						foreach (var subscriptioninfo in SubscriptionInfos)
						{
							<option value="@subscriptioninfo.Id">@subscriptioninfo.SubTierName</option>
						}
					}
				</InputSelect>


			</div>
		</div>
	<div class="form-group">
		<label>
			Customer:
		</label>
		<div>
			<InputSelect @bind-Value="subscription.CustomerID" class="form-control">
				<option value="">--Select Customer--</option>
				@if(Customers != null)
				{
					foreach(var customer in Customers){
						<option value="@customer.Id">@customer.UserName</option>
					}
				}
			</InputSelect>
		</div>
	</div>
	<div class="form-group">
		<label>Cost: </label>
		<div>
			<InputNumber @bind-Value="subscription.Cost" class="form-control" />
			<ValidationMessage For="@(() => subscription.Cost)" />
		</div>
	</div>

		<div class="form-group">
			<label>Date Start: </label>
			<div>
				<InputDate @bind-Value="subscription.DateStart"
				@bind-Value:event="oninput"
						   class="form-control"
				@onchange="CalculateEndDate" />
				<ValidationMessage For="@(() => subscription.DateStart)" />
			</div>
		</div>
		
		<div class="form-group">
			<label>Date End: </label>
			<div>
				@if (subscription.DateEnd != DateTime.MinValue)
				{
					<input class="form-control" value="@subscription.DateEnd.ToString("yyyy-MM-dd")" disabled />
				}
				else
				{
					<input class="form-control" value="Not Set" disabled />
				}
			</div>
		</div>

    </fieldset>
	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}
	
	<BackToList Target="subscriptions" />
</EditForm>
@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Subscription? subscription { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
	private IList<Customer>? Customers;
	private IList<SubscriptionInfo>? SubscriptionInfos;

	private void CalculateEndDate()
	{
		if (subscription != null && subscription.DateStart != DateTime.MinValue && subscription.SubInfoID>0)
		{
			var subInfo = SubscriptionInfos?.FirstOrDefault(si => si.Id == subscription.SubInfoID);
			if (subInfo != null && subInfo.SubMonthsDuration.HasValue)
			{
				subscription.DateEnd = subscription.DateStart.AddMonths(subInfo.SubMonthsDuration.Value);
				Console.WriteLine($"New DateEnd calculated: {subscription.DateEnd:yyyy-MM-dd}");
			}
		}
	}


	// Method to handle changes in the SubInfoID dropdown
	private void OnSubInfoIDChanged(ChangeEventArgs e)
	{
		Console.WriteLine($"Yes");
		if (int.TryParse(e.Value?.ToString(), out var subInfoId))
		{
			subscription.SubInfoID = subInfoId;
			CalculateEndDate();
		}
	}




	protected async override Task OnInitializedAsync()
	{
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
		SubscriptionInfos = await _client.GetFromJsonAsync<List<SubscriptionInfo>>($"{Endpoints.SubscriptionInfosEndpoint}");
	}
}