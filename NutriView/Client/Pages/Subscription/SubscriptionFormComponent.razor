@using NutriView.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@subscription" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
		<div class="form-group">
			<label>
				SubTier:
			</label>
			<div>
				<InputSelect @bind-Value="subscription.SubInfoID" class="form-control" @oninput="HandleSubInfoChanges">
					<option value="">--Select Subscription Info--</option>
					@if (SubscriptionInfos != null)
					{
						foreach (var subscriptioninfo in SubscriptionInfos)
						{
							<option value="@subscriptioninfo.Id">@subscriptioninfo.SubTierName</option>
						}
					}
				</InputSelect>
			</div>
		</div>
	<div class="form-group">
		<label>
			Customer:
		</label>
		<div>
			<InputSelect @bind-Value="subscription.CustomerID" class="form-control">
				<option value="">--Select Customer--</option>
				@if(Customers != null)
				{
					foreach(var customer in Customers){
						<option value="@customer.Id">@customer.UserName</option>
					}
				}
			</InputSelect>
		</div>
	</div>
	<div class="form-group">
		<label>Cost: </label>
		<div>
			<InputNumber @bind-Value="subscription.Cost" class="form-control" />
			<ValidationMessage For="@(() => subscription.Cost)" />
		</div>
	</div>

	<div class="form-group">
		<label>Date Start: </label>
		<div>
			<InputDate @bind-Value="subscription.DateStart" class="form-control" />
			<ValidationMessage For="@(() => subscription.DateStart)" />
		</div>
	</div>
	<div class="form-group">
		<label>Date End: </label>
		<div>
			<InputDate @bind-Value="subscription.DateEnd" class="form-control" />
			<ValidationMessage For="@(() => subscription.DateEnd)" />
		</div>
	</div>
    </fieldset>
	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}
	
	<BackToList Target="subscriptions" />
</EditForm>
@code {
		[Parameter] public bool Disabled { get; set; } = false;
		[Parameter] public Subscription? subscription { get; set; }
		[Parameter] public string ButtonText { get; set; } = "Save";
		[Parameter] public EventCallback OnValidSubmit { get; set; }
	private IList<Customer>? Customers;
	private IList<SubscriptionInfo>? SubscriptionInfos;

	protected async override Task OnInitializedAsync()
	{
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
		SubscriptionInfos = await _client.GetFromJsonAsync<List<SubscriptionInfo>>($"{Endpoints.SubscriptionInfosEndpoint}");
	}

	private void HandleSubInfoChanges(ChangeEventArgs OnChangeSubInfoID)
	{
		if (OnChangeSubInfoID.Value != null && int.TryParse(OnChangeSubInfoID.Value.ToString(), out int CurrentSubInfoId))
		{
			var selectedEntity = SubscriptionInfos.FirstOrDefault(sI => sI.Id == CurrentSubInfoId);

			if (selectedEntity != null && subscription.DateStart != null)
			{
				subscription.DateEnd = subscription.DateStart.AddMonths(selectedEntity.SubMonthsDuration);
			}
		}
	}
}