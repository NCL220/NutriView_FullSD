@page "/subscriptions"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using NutriView.Shared.Domain

<h3>Subscriptions</h3>

@if (subscriptions is null)
{
    <p><em>Loading...</em></p>
}
else if (subscriptions.Count == 0)
{
    <p>No subscriptions found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Customer ID</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var subscription in subscriptions)
            {
                <tr>
                    <td>@subscription.CustomerID</td>
                    <td>@subscription.DateStart.ToString("yyyy-MM-dd")</td>
                    <td>@subscription.DateEnd.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditSubscription(subscription.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteSubscription(subscription.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Subscription>? subscriptions;

    protected override async Task OnInitializedAsync()
    {
        subscriptions = await Http.GetFromJsonAsync<List<Subscription>>("api/Subscriptions");
    }

    private void EditSubscription(int subscriptionId)
    {
        NavigationManager.NavigateTo($"/edit-subscription/{subscriptionId}");
    }

    private async Task DeleteSubscription(int subscriptionId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this subscription?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/Subscriptions/{subscriptionId}");
            if (response.IsSuccessStatusCode)
            {
                subscriptions = subscriptions.Where(s => s.Id != subscriptionId).ToList();
                StateHasChanged();
            }
            else
            {
                // Handle error here
            }
        }
    }
}
