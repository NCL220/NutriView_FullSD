
@page "/submitfoodentries"
@using NutriView.Shared.Domain;
@inject HttpClient _client
@inject NavigationManager _navManager
@using NutriView.Client.Pages.FoodEntries;
@using NutriView.Client.Pages.Meals;
<h3 class="card-title">Create New Food Entries</h3>
<hr />
<br />

<EntryFormComponent ButtonText="Create Food Entry" foodEntry="foodEntry" SubmitDataThroughForm=@SubmitDataThroughForm />
<FormComponent ButtonText="Create Meal" meal="meal" SubmitDataThroughForm=@SubmitDataThroughForm @ref="MealComponentRef" />
<button class="btn btn-primary" @onclick="SubmitForm">Submit Form from Parent</button>
@code {
    [Parameter] public bool SubmitDataThroughForm { get; set; } = true;
    private FoodEntry foodEntry = new FoodEntry();
    private IList<Customer> Customers; // Assuming you need to associate Customers with FoodEntry
    private Meal meal = new Meal();
    private FormComponent MealComponentRef; //FormComponentMeal

    protected override async Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    private async Task SubmitForm()
    {
        try
        {
            var response = await _client.PostAsJsonAsync($"{Endpoints.FoodEntriesEndpoint}", foodEntry);

            if (response.IsSuccessStatusCode)
            {
                var createdFoodEntry = await response.Content.ReadFromJsonAsync<FoodEntry>();

                if (createdFoodEntry != null)
                {
                    Console.WriteLine($"Created FoodEntry with ID: {createdFoodEntry.Id}");

                    // Use createdFoodEntry.Id as needed
                    int foodEntryIdfromFE = createdFoodEntry.Id;

                    MealComponentRef.meal.FoodEntryID = foodEntryIdfromFE;

                    await _client.PostAsJsonAsync(Endpoints.MealsEndpoint, meal);

                    Console.WriteLine($"Created Meals");


                    //Navigate to the appropriate page or perform other actions
                    _navManager.NavigateTo($"/");
                }
                else
                {
                    Console.WriteLine($"---------------------------Created FoodEntry is null");
                    // Handle the case where the response content couldn't be parsed as FoodEntry
                    // You might want to add error handling logic here
                }
            }
            else
            {
                Console.WriteLine($"----------------------Response is null");
                // Handle errors here
            }
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine($"Exception during FoodEntry creation: {ex.Message}");
        }
    }
}