@page "/services"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime JSRuntime
@using NutriView.Shared.Domain
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3>Subscription Services</h3>
<a href="/services/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Services
</a>
@if (services is null)
{
    <p><em>Loading...</em></p>
}
else if (services.Count == 0)
{
    <p>No nutrition information found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Service</th>
                <td>Description</td>
                <th>Service Code</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in services)
            {
                <tr>
                     <td>@service.ServiceName</td>
                    <td>@service.ServiceDescription</td>
                    <td>@service.ServiceCode</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditService(service.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteService(service.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Service>? services;
    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        services = await _client.GetFromJsonAsync<List<Service>>("api/Services");
    }

    private void EditService(int infoId)
    {
        _navManager.NavigateTo($"/services/edit/{infoId}");
    }

    private async Task DeleteService(int infoId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this service?");
        if (confirmed)
        {
            var response = await _client.DeleteAsync($"api/Services/{infoId}");
            if (response.IsSuccessStatusCode)
            {
                services = services.Where(ni => ni.Id != infoId).ToList();
                StateHasChanged();
            }
            else
            {
                // Handle error here
            }
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}