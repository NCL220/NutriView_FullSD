@using NutriView.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@nutritionalQuota" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
		@if (EditQuotaThroughPersonalProfile)
		{

		}
		else
		{
			<div class="form-group">
				<label>
					Customer:
				</label>
				<div>
					<InputSelect @bind-Value="nutritionalQuota.CustomerID" class="form-control">
						<option value="">--Select Customer--</option>
						@if (Customers != null)
						{
							foreach (var customer in Customers)
							{
								<option value="@customer.Id">@customer.UserName</option>
							}
						}
					</InputSelect>
				</div>
			</div>
		}
		
	<div class="form-group">
			<label>TargetCalorieDaily: </label>
		<div>
			<InputNumber @bind-Value="nutritionalQuota.TargetCalorieDaily" class="form-control" />
			<ValidationMessage For="@(() => nutritionalQuota.TargetCalorieDaily)" />
		</div>
	</div>
	<div class="form-group">
		<label>TargetCarbDaily: </label>
		<div>
			<InputNumber @bind-Value="nutritionalQuota.TargetCarbDaily" class="form-control" />
				<ValidationMessage For="@(() => nutritionalQuota.TargetCarbDaily)" />
		</div>
	</div>
	<div class="form-group">
		<label>TargetBMI: </label>
		<div>
			<InputNumber @bind-Value="nutritionalQuota.TargetBMI" class="form-control" />
			<ValidationMessage For="@(() => nutritionalQuota.TargetBMI)" />
		</div>
	</div>


    </fieldset>
	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}
	<BackToList Target="nutritionalQuotas" />
</EditForm>
@code {
		[Parameter] public bool Disabled { get; set; } = false;
        [Parameter] public NutritionalQuota? nutritionalQuota { get; set; }
        [Parameter] public string ButtonText { get; set; } = "Save";
        [Parameter] public EventCallback OnValidSubmit { get; set; }
		[Parameter] public bool EditQuotaThroughPersonalProfile { get; set; }

	private IList<Customer>? Customers;

	protected async override Task OnInitializedAsync()
	{
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
	}
}