@using NutriView.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@foodEntry" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />



    <div class="form-group">
        <label for="timeStamp">Time Stamp:</label>
        <InputDate id="timeStamp" class="form-control" @bind-Value="foodEntry.Time_Stamp" />
        <ValidationMessage For="@(() => foodEntry.Time_Stamp)" />
    </div>



    

    @if (SubmitDataThroughForm)
    {
    <div class="form-group">
        <label for="customer">Customer:</label>
        <InputSelect id="customer" class="form-control" @bind-Value="foodEntry.CustomerID">
            <option value="">-- Select Customer (Subscriber)  --</option>
            @if (FilterredCustomers != null)
            {

                foreach (var filterredcustomer in FilterredCustomers)
                {
                    <option value="@filterredcustomer.Id">@filterredcustomer.UserName</option>
                }
            }
        </InputSelect>
            <ValidationMessage For="@(() => foodEntry.CustomerID)" />
        </div>

        <div class="form-group">
            <label for="totalCalories">Total Calories:</label>
            <textarea id="totalCalories" class="form-control" @bind="foodEntry.TotalCalories" readonly />
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="customer">Customer:</label>
            <InputSelect id="customer" class="form-control" @bind-Value="foodEntry.CustomerID">
                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {

                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.UserName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => foodEntry.CustomerID)" />
        </div>
        <div class="form-group">
            <label for="totalCalories">Total Calories:</label>
            <InputNumber id="totalCalories" class="form-control" @bind-Value="foodEntry.TotalCalories" />
            <ValidationMessage For="@(() => foodEntry.TotalCalories)" />
        </div>
        <button type="submit" class="btn btn-success">
            @ButtonText
            </button>
    }
</EditForm>

@code {
    [Parameter] public FoodEntry? foodEntry { get; set; } = new FoodEntry();
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool SubmitDataThroughForm { get; set; }

    private string ServiceIDForFoodEntry = "9e7)9bD"; //Service ID is  9e7)9bD (Which allow User to use SubmitFormEntries) (Adminstrator Only)


    private IList<Customer>? Customers;
    private IList<Subscription>? Subscriptions;
    private IList<SubscriptionInfo>? SubscriptionInfos;
    private IList<ServiceLinkSubInfo>? ServiceLinkSubInfos;
    private IList<Service>? Services;
    private List<Customer>? FilterredCustomers = new List<Customer>();

    protected override async Task OnInitializedAsync()
    {
        SubscriptionInfos = await _client.GetFromJsonAsync<List<SubscriptionInfo>>($"{Endpoints.SubscriptionInfosEndpoint}");
        Subscriptions = await _client.GetFromJsonAsync<List<Subscription>>($"{Endpoints.SubscriptionsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        ServiceLinkSubInfos = await _client.GetFromJsonAsync<List<ServiceLinkSubInfo>>($"{Endpoints.ServiceLinkSubInfosEndpoint}");
        Services = await _client.GetFromJsonAsync<List<Service>>($"{Endpoints.ServicesEndpoint}");


        if (SubmitDataThroughForm)
        {
            await ServiceIDCheck();
        }
    }
    private async Task ServiceIDCheck()
    {

        if (Customers is not null)
        {
            foreach (var c in Customers)
            {
                var subscription = Subscriptions.Where(s => s.CustomerID == c.Id).OrderByDescending(s => s.DateCreated).FirstOrDefault();
                if (subscription is not null)
                {
                    var sinfo = SubscriptionInfos.Where(si => si.Id == subscription.SubInfoID).FirstOrDefault();
                    if (sinfo is not null)
                    {
                        var LinkServSubInfo = ServiceLinkSubInfos.Where(sl => sl.SubscriptionInfoID == sinfo.Id).ToList(); // ToList() to materialize the collection

                        if (LinkServSubInfo is not null)
                        {
                            foreach (var l in LinkServSubInfo)
                            {
                                var Servicing = Services.Where(ser => ser.Id == l.ServiceID).FirstOrDefault();
                                if (ServiceIDForFoodEntry == Servicing.ServiceCode)
                                {
                                    if (!FilterredCustomers.Contains(c))
                                    {
                                        FilterredCustomers.Add(c);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }


    }
 }

