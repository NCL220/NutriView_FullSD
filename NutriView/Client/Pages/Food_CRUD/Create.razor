@page "/foods/create"
@using NutriView.Shared.Domain
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>Create New Food</h3>
<hr />
<br />

<InputFile OnChange="LoadFile" />
<br />
<button @onclick="ProcessFile" class="btn btn-primary" disabled="@(!fileLoaded)">Create Foods from File</button>
<br />
<br />

<FormComponent ButtonText="Create Food" food="food" OnValidSubmit="@CreateFood" />
@code {
    private Food food = new Food();
    private IList<FoodEntry> Entries;
    private bool fileLoaded = false;
    private List<Food> foodsFromFile = new List<Food>();

    protected override async Task OnInitializedAsync()
    {
        Entries = await _client.GetFromJsonAsync<List<FoodEntry>>($"{Endpoints.FoodEntriesEndpoint}");
    }

    private async Task CreateFood()
    {
        var response = await _client.PostAsJsonAsync("api/foods/", food);

        if (response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/foods/");
        }
        else
        {
            // Handle errors here
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024); // Limit size to 1MB, adjust as needed
                using var reader = new StreamReader(stream);
                var content = await reader.ReadToEndAsync();

                Console.WriteLine("File content received");
                foodsFromFile = System.Text.Json.JsonSerializer.Deserialize<List<Food>>(content);

                if (foodsFromFile != null && foodsFromFile.Count > 0)
                {
                    fileLoaded = true;
                    Console.WriteLine("File loaded and deserialized with " + foodsFromFile.Count + " items.");
                }
                else
                {
                    Console.WriteLine("File is empty or not in the correct format.");
                }
            }
            
            catch (Exception ex)
            {
                Console.WriteLine("Error reading file: " + ex.Message);
                // You may want to set fileLoaded to false here.
            }

            // Force the UI to update
            StateHasChanged();
        }
    }

    private async Task ProcessFile()
    {
        foreach (var foodItem in foodsFromFile)
        {
            await CreateFoodFromFile(foodItem);
        }

        // Reset the flag and clear the list after processing
        fileLoaded = false;
        foodsFromFile.Clear();

        _navManager.NavigateTo("/foods/");
    }

    private async Task CreateFoodFromFile(Food newFood)
    {
        var response = await _client.PostAsJsonAsync("api/foods/", newFood);
    }
}
