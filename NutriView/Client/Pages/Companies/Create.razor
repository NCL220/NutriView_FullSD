@page  "/companies/create/"
@using NutriView.Shared.Domain;
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>class="card-title">Create New Company</h3>
<EditForm Model="@company" OnValidSubmit="CreateCompany">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label for="companyName">Company Name:</label>
        <InputText id="companyName" class="form-control" @bind-Value="company.CompanyName" />
        <ValidationMessage For="@(() => company.CompanyName)" />
    </div>

    <div class="form-group">
        <label for="mission">Mission:</label>
        <InputTextArea id="mission" class="form-control" @bind-Value="company.Mission" />
        <ValidationMessage For="@(() => company.Mission)" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="company.CompanyDescription" />
        <ValidationMessage For="@(() => company.CompanyDescription)" />
    </div>

    <div class="form-group">
        <label for="imagePath">Image Path:</label>
        <InputText id="imagePath" class="form-control" @bind-Value="company.CompanyImagePath" />
        <ValidationMessage For="@(() => company.CompanyImagePath)" />
    </div>

    <button type="submit" class="btn btn-success">Create Company</button>
</EditForm>
<hr />
<br />
@code {
    private Company company = new Company();

    private IList<Staff> Staffs;


    protected override async Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");

        // Initialize the company object if needed
    }

    private async Task CreateCompany()
    {
        await _client.PostAsJsonAsync(Endpoints.CompaniesEndpoint, company);
        _navManager.NavigateTo("/companies/");
    }
}

