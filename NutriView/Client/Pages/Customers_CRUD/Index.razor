@page "/customers"
@inject HttpClient _client
@inject IJSRuntime js
@using NutriView.Shared.Domain

<h3>Customers</h3>
<a href="/customers/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Customer
</a>
<br />
<br />
@if (customers is null)
{
    <div>Loading customers...</div>
}
else if (!customers.Any())
{
    <div>No customers found.</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Age</th>
                <th>Email</th>
                <th>Height</th>
                <th>Weight</th>
                <th>Gender</th>
                <th>Profile Pic</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.UserName</td>
                    <td>@customer.Age</td>
                    <td>@customer.Email</td>
                    <td>@customer.Height cm</td>
                    <td>@customer.Weight kg</td>
                    @if(genders is not null)
                    {
                        @foreach (var gender in genders.Where(g => g.Id == customer.GenderID))
                        {
                            <td>@gender.Name</td>
                        }
                    }
                    <td>
                            @if (customer.ImageBytes != null && customer.ImageBytes.Length > 0)
                            {
                            <img src="@($"data:image/png;base64,{Convert.ToBase64String(customer.ImageBytes)}")" alt="Image" style="height:70px;width:70px;">
                            }
                            else
                            {
                            <img src="Images/Defaultimg.jpg" class="card-img" alt="Image" style="height:70px;width:70px;">
                            }
                    </td>
                    <td>
                        <a href="/customers/edit/@customer.Id" class="btn btn-primary">Edit</a>
                        <button class="btn btn-danger" @onclick="() => DeleteCustomer(customer.Id)">Delete</button>
                        <a href="/customers/view/@customer.Id" class="btn btn-primary">View</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Customer>? customers;
    private List<Gender>? genders;

    protected override async Task OnInitializedAsync()
    {
        customers = await _client.GetFromJsonAsync<List<Customer>>("api/customers");
        if (customers is null)
        {
            customers = new List<Customer>();
        }
        genders = await _client.GetFromJsonAsync<List<Gender>>("api/genders");
    }

    private async Task DeleteCustomer(int customerId)
    {
        var confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (!confirmed)
        {
            return;
        }

        var response = await _client.DeleteAsync($"api/customers/{customerId}");

        if (response.IsSuccessStatusCode)
        {
            customers = customers.Where(c => c.Id != customerId).ToList();
            StateHasChanged();
        }
        else
        {
            // Handle the error, e.g., show an error message
        }
    }
}
