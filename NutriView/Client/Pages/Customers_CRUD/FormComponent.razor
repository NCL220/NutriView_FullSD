@using NutriView.Shared.Domain;
@inject HttpClient _client
<head>
    <link href="./css/StaffAndCustomerForm.css" rel="stylesheet" />
</head>
<EditForm Model="@customer" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
<div class="rounded-div">
    <div class="rounded-imagediv">
        <div class="rounded-imagesubdiv1">
        @if (customer.ImageBytes != null && customer.ImageBytes.Length > 0)
                    {
                        <img src="@($"data:image/png;base64,{Convert.ToBase64String(customer.ImageBytes)}")" alt="Image">
                    }
                    else
                    {
                        <img src="Images/Defaultimg.jpg" class="card-img" alt="Image">
                    }
        </div>
        <div class="rounded-imagesubdiv2">
            <div class="form-group">
			    <label for="CustomerImage">Insert Customer Image : </label>
			    <InputFile id="images" class="file-input" OnChange="HandleFileSelection" />
		    </div>
        </div>    
        
        @if(!Disabled){
        <div class="bottom-container">
            <button type="submit" class="btn btn-success">@ButtonText</button>
        </div>
    }
    </div>
    <div class="rounded-normaldiv">
        <div class="form-group">
            <label for="userName">Username:</label>
            <InputTextArea id="userName" class="form-control" @bind-Value="customer.UserName" />
            <ValidationMessage For="@(() => customer.UserName)" />
        </div
        <div class="form-group">
            <label for="age">Age:</label>
            <InputNumber id="age" class="form-control" @bind-Value="customer.Age" />
            <ValidationMessage For="@(() => customer.Age)" />
        </div>

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="customer.Email" />
            <ValidationMessage For="@(() => customer.Email)" />
        </div>

        <div class="form-group">
            <label for="pwd">Password:</label>
            <InputText id="pwd" class="form-control" @bind-Value="customer.Password" />
            <ValidationMessage For="@(() => customer.Password)" />
        </div>

        <div class="form-group">
            <label for="height">Height (cm):</label>
            <InputNumber id="height" class="form-control" @bind-Value="customer.Height" />
            <ValidationMessage For="@(() => customer.Height)" />
        </div>

        <div class="form-group">
            <label for="weight">Weight (kg):</label>
            <InputNumber id="weight" class="form-control" @bind-Value="customer.Weight" />
            <ValidationMessage For="@(() => customer.Weight)" />
        </div>

        <div class="form-group">
    <label for="gender">Gender:</label>
    <InputSelect id="gender" class="form-control" @bind-Value="customer.GenderID">
        <option value="">-- Select Gender --</option>
             @if(Genders is not null){
                 @foreach (var gender in Genders)
                 {
                    <option value="@gender.Id">@gender.Name</option>
                 }
             }

    </InputSelect>
</div>
    </div>
</div>
    </fieldset>
    

    

    
</EditForm>

@code {
        [Parameter] public Customer? customer { get; set; } = new Customer();
        [Parameter] public string ButtonText { get; set; } = "Save";
        [Parameter] public EventCallback OnValidSubmit { get; set; }
        [Parameter] public bool Disabled { get; set; } = false;

        private IList<FoodEntry>? Entries;
        private IList<Gender>? Genders;

        protected async override Task OnInitializedAsync()
        {
            Genders = await _client.GetFromJsonAsync<List<Gender>>($"{Endpoints.GendersEndpoint}");
            Entries = await _client.GetFromJsonAsync<List<FoodEntry>>($"{Endpoints.FoodEntriesEndpoint}");
        }
        private async Task HandleFileSelection(InputFileChangeEventArgs e)
	    {
		var imgfile = e.GetMultipleFiles().FirstOrDefault();
		if (imgfile != null)
		{
			var buffer = new byte[imgfile.Size];
			using (var stream = imgfile.OpenReadStream())
			{
				await stream.ReadAsync(buffer, 0, buffer.Length);
			}
			customer.ImageBytes = buffer;
		}
	}
    }
