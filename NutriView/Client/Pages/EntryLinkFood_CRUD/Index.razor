@page "/entrylinkfoods"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using NutriView.Shared.Domain

<h3>Food Entries And Food Database Link</h3>
<a href="/entryLinkFoods/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New entryLinkFood
</a>
@if (entryLinkFoods is null)
{
    <p><em>Loading...</em></p>
}
else if (entryLinkFoods.Count == 0)
{
    <p>No nutrition information found.</p>
}
else
{
    <table class="table ">
        <thead>
            <tr>
                <th>Customer Name [FoodEntry]</th>
                <th>Time-Stamp</th>
                <th>FoodEntryID</th>
                <th>Food</th>
                <th>FoodID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var link in entryLinkFoods)
            {
                <tr>
                        @foreach (var foodentry in foodentries.Where(f=>f.Id == link.FoodEntryID))
                        {
                            @foreach (var customer in customers.Where(c => c.Id == foodentry.CustomerID))
                            {
                            <td>@customer.UserName</td>
                            }
                            <td>@foodentry.Time_Stamp</td>
                            <td>@foodentry.Id</td>
                        }
                        @foreach (var food in foods.Where(fo => fo.Id == link.FoodID))
                            {
                            <td>@food.Name</td>
                            }
                    <td>@link.FoodID</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditEntryLinkFood(link.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteEntryLinkFood(link.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EntryLinkFood>? entryLinkFoods;
    private List<FoodEntry>? foodentries;
    private List<Customer>? customers;
    private List<Food>? foods;
    protected override async Task OnInitializedAsync()
    {

        entryLinkFoods = await Http.GetFromJsonAsync<List<EntryLinkFood>>("api/entrylinkfoods");

        try
        {
            foods = await Http.GetFromJsonAsync<List<Food>>("api/Foods");
            if (foods is null)
            {
                foods = new List<Food>();
            }

            foodentries = await Http.GetFromJsonAsync<List<FoodEntry>>("api/FoodEntries");
            if (foodentries is null)
            {
                foodentries = new List<FoodEntry>();
            }

            customers = await Http.GetFromJsonAsync<List<Customer>>("api/Customers");
            if (customers is null)
            {
                customers = new List<Customer>();
            }

        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private void EditEntryLinkFood(int linkId)
    {
        NavigationManager.NavigateTo($"/entrylinkfoods/edit/{linkId}");
    }

    private async Task DeleteEntryLinkFood(int infoId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this nutrition information?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/EntryLinkFoods/{infoId}");
            if (response.IsSuccessStatusCode)
            {
                entryLinkFoods = entryLinkFoods.Where(ni => ni.Id != infoId).ToList();
                StateHasChanged();
            }
            else
            {
                // Handle error here
            }
        }
    }
}
