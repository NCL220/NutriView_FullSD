@using NutriView.Shared.Domain;
@inject HttpClient _client
<head>
	<link href="./css/StaffAndCustomerForm.css" rel="stylesheet" />
</head>
<EditForm Model="@staff" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
    <ValidationSummary />
	
<div class="rounded-div">
		<div class="rounded-imagediv">
			<div class="rounded-imagesubdiv1">
				@if (staff.ImageByte != null && staff.ImageByte.Length > 0)
				{
					<img src="@($"data:image/png;base64,{Convert.ToBase64String(staff.ImageByte)}")" alt="Image">
				}
				else
				{
					<img src="Images/Defaultimg.jpg" class="card-img" alt="Image">
				}
			</div>
			<div class="rounded-imagesubdiv2">
				<div class="form-group">
					<label for="StaffImage">Insert Staff Image : </label>
					<InputFile id="images" class="file-input" OnChange="HandleFileSelection" />
				</div>
			</div>

			<div class="bottom-container">
				<button type="submit" class="btn btn-success">@ButtonText</button>
			</div>
		</div>
		<div class="rounded-normaldiv">
			<div class="form-group">
				<label>Role:</label>
				<InputSelect @bind-Value="staff.Role" class="form-control">
					<option value="">-- Select Role --</option>
					<option value="Staff">Staff</option>
					<option value="Manager">Manager</option>
				</InputSelect>
			</div>

			@if (staff.Role == "Manager")
			{
				<div class="form-group">
					<label>Manager ID (for internal use only):</label>
					<InputNumber @bind-Value="staff.ManagerID" class="form-control" />
				</div>
			}
			<div class="form-group">
			<label>
				Company:
			</label>
			<div>
				<InputSelect @bind-Value="staff.CompanyId" class="form-control">
					<option value="">--Select Company--</option>
					@if(Companies != null)
					{
						foreach(var company in Companies)
						{
							<option value="@company.Id">@company.CompanyName</option>
						}
					}
				</InputSelect>
			</div>
			</div>
			<div class="form-group">
				<label>Name: </label>
				<div>
					<InputText @bind-Value="staff.UserName" class="form-control" />
					<ValidationMessage For="@(() => staff.UserName)" />
				</div>
			</div>
	
			<div class="form-group">
				<label>Password: </label>
				<div>
					<InputText @bind-Value="staff.Password" class="form-control" />
					<ValidationMessage For="@(() => staff.Password)" />
				</div>
			</div>
			<div class="form-group">
				<label>Email: </label>
				<div>
					<InputText @bind-Value="staff.Email" class="form-control" />
					<ValidationMessage For="@(() => staff.Email)" />
				</div>
			</div>
			<div class="form-group">
				<label>PhoneNumber: </label>
				<div>
					<InputText @bind-Value="staff.PhoneNumber" class="form-control" />
					<ValidationMessage For="@(() => staff.PhoneNumber)" />
				</div>
			</div>


	
		</div>
</div>
</EditForm>
@code {

		[Parameter] public bool Disabled { get; set; } = false;
        [Parameter] public Staff? staff { get; set; }
        [Parameter] public string ButtonText { get; set; } = "Save";
        [Parameter] public EventCallback OnValidSubmit { get; set; }
	[Parameter] public SubscriptionInfo? subscriptionInfo { get; set; }


    private IList<Company>? Companies;

    protected async override Task OnInitializedAsync()
    {
        Companies = await _client.GetFromJsonAsync<List<Company>>($"{Endpoints.CompaniesEndpoint}");
    }
	private async Task HandleFileSelection(InputFileChangeEventArgs e)
	{
		var imgfile = e.GetMultipleFiles().FirstOrDefault();
		if (imgfile != null)
		{
			var buffer = new byte[imgfile.Size];
			using (var stream = imgfile.OpenReadStream())
			{
				await stream.ReadAsync(buffer, 0, buffer.Length);
			}
			staff.ImageByte = buffer;
		}
	}
    
}