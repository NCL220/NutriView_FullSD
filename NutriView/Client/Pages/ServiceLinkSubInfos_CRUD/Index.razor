@page "/serviceLinkSubInfos"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime JSRuntime
@using NutriView.Shared.Domain

<h3>Service Link With Subscription</h3>
<a href="/serviceLinkSubInfos/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Service Link
</a>
<style>
    body{
        background-color:darkslategrey
    }
    .table {
        width: 100%;
        border: 1px solid $color-form-highlight;
    }

    thead {
        width: 100%;
        background: #000;
    }
    th {
        padding: 20px 15px;
        text-align: left;
        font-weight: 500;
        font-size: 12px;
        color: white;
        text-transform: uppercase;
    }

    td {
        padding: 15px;
        text-align: left;
        vertical-align: middle;
        font-weight: 300;
        font-size: 12px;
        color: forestgreen;
        border: 2px solid aqua;
    }
</style>
@if (serviceLinkSubInfos is null)
{
    <p><em>Loading...</em></p>
}
else if (serviceLinkSubInfos.Count == 0)
{
    <p>No nutrition information found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>SubInfoId</th>
                <th>ServiceId</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var serviceLinkSubInfo in serviceLinkSubInfos)
            {
                <tr>
                    <td>@serviceLinkSubInfo.SubscriptionInfoID</td>
                    <td>@serviceLinkSubInfo.ServiceID</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditServiceLinkSubInfo(serviceLinkSubInfo.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteServiceLinkSubInfo(serviceLinkSubInfo.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ServiceLinkSubInfo>? serviceLinkSubInfos;
    protected override async Task OnInitializedAsync()
    {
        serviceLinkSubInfos = await _client.GetFromJsonAsync<List<ServiceLinkSubInfo>>("api/servicelinksubinfos");
    }


    private void EditServiceLinkSubInfo(int infoId)
    {
        _navManager.NavigateTo($"/serviceLinkSubInfos/edit/{infoId}");
    }

    private async Task DeleteServiceLinkSubInfo(int infoId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this service Link SubInfos?");
        if (confirmed)
        {
            var response = await _client.DeleteAsync($"api/serviceLinkSubInfos/{infoId}");
            if (response.IsSuccessStatusCode)
            {
                serviceLinkSubInfos = serviceLinkSubInfos.Where(ni => ni.Id != infoId).ToList();
                StateHasChanged();
            }
            else
            {
                // Handle error here
            }
        }
    }
    }