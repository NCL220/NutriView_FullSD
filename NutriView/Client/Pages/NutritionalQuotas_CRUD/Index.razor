@page "/nutritionalquotas"
@inject HttpClient _client
@inject IJSRuntime js
@using NutriView.Shared.Domain

<h3>Nutritional Quotas Configuration</h3>
<a href="nutritionalQuotas/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Quota
</a>
@if (NutritionalQuotas is null)
{
    <p><em>Loading...</em></p>
}
else if (NutritionalQuotas.Count == 0)
{
    <p>No nutritional quotas found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Customer ID</th>
                <th>Target Calorie Daily</th>
                <th>Target Carb Daily</th>
                <th>Target BMI</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quota in NutritionalQuotas)
            {
                <tr>
                    <td>@quota.CustomerID</td>
                    <td>@quota.TargetCalorieDaily</td>
                    <td>@quota.TargetCarbDaily</td>
                    <td>@quota.TargetBMI</td>
                    <td>
                        <a href="/nutritionalQuotas/edit/@quota.Id" class="btn btn-primary">Edit</a>
                        <button class="btn btn-danger" @onclick="() => Delete(quota.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<NutritionalQuota>? NutritionalQuotas;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            NutritionalQuotas = await _client.GetFromJsonAsync<List<NutritionalQuota>>("api/NutritionalQuotas");
            if (NutritionalQuotas is null)
            {
                NutritionalQuotas = new List<NutritionalQuota>(); // Initialize to an empty list if null is returned
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    async Task Delete(int NutritionalQuotaId)
    {
        if (NutritionalQuotas is null) return; // Guard clause for null 'NutritionalQuotas'

        var NutritionalQuota = NutritionalQuotas.FirstOrDefault(c => c.Id == NutritionalQuotaId);
        if (NutritionalQuota != null && await js.InvokeAsync<bool>("confirm", $"Do you want to delete {NutritionalQuota.Id}?"))
        {
            try
            {
                await _client.DeleteAsync($"api/NutritionalQuotas/{NutritionalQuotaId}");
                NutritionalQuotas.Remove(NutritionalQuota);
                StateHasChanged(); // Refresh the UI
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting NutritionalQuota: {ex.Message}");
                // Handle the error, e.g., show a message to the user
            }
        }
    }
}

