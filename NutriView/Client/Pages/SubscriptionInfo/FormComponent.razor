@using NutriView.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@subscriptionInfo" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputText @bind-Value="subscriptionInfo.SubDescription" class="form-control" />
                <ValidationMessage For="@(() => subscriptionInfo.SubDescription)" />
            </div>
        </div>

        <div class="form-group">
            <label>Cost: </label>
            <div>
                <InputNumber @bind-Value="subscriptionInfo.SubCost" class="form-control" />
                <ValidationMessage For="@(() => subscriptionInfo.SubCost)" />
            </div>
        </div>
        <div class="form-group">
            <label>Tier Name: </label>
            <div>
                <InputText @bind-Value="subscriptionInfo.SubTierName" class="form-control" />
                <ValidationMessage For="@(() => subscriptionInfo.SubTierName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Type: </label>
            <div>
                <InputText @bind-Value="subscriptionInfo.SubType" class="form-control" />
                <ValidationMessage For="@(() => subscriptionInfo.SubType)" />
            </div>
        </div>
        <div class="form-group">
            <label>Duration (In Months): </label>
            <div>
                <InputNumber @bind-Value="subscriptionInfo.SubMonthsDuration" class="form-control" />
                <ValidationMessage For="@(() => subscriptionInfo.SubMonthsDuration)" />
            </div>
            </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="subscriptionInfos" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public SubscriptionInfo? subscriptionInfo { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private IList<Staff>? Staff;
    protected async override Task OnInitializedAsync()
    {
        Staff = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }
}
