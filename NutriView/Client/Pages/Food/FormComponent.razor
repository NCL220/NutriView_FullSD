q@using NutriView.Shared.Domain;
@using System.Collections
@inject HttpClient _client

<EditForm Model="@food" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="food.Name" />
        <ValidationMessage For="@(() => food.Name)" />
    </div>

    <div class="form-group">
        <label for="calories">Calories:</label>
        <InputNumber id="calories" class="form-control" @bind-Value="food.Calories" />
        <ValidationMessage For="@(() => food.Calories)" />
    </div>

    <div class="form-group">
        <label for="carbohydrates">Carbohydrates:</label>
        <InputNumber id="carbohydrates" class="form-control" @bind-Value="food.Carbohydrates" />
        <ValidationMessage For="@(() => food.Carbohydrates)" />
    </div>

    <div class="form-group">
        <label for="fats">Fats:</label>
        <InputNumber id="fats" class="form-control" @bind-Value="food.Fats" />
        <ValidationMessage For="@(() => food.Fats)" />
    </div>

    <div class="form-group">
        <label for="vitamins">Vitamins:</label>
        <InputText id="vitamins" class="form-control" @bind-Value="food.Vitamins" />
        <ValidationMessage For="@(() => food.Vitamins)" />
    </div>

    <div class="form-group">
        <label for="servingSize">Serving Size:</label>
        <InputNumber id="servingSize" class="form-control" @bind-Value="food.ServingSize" />
        <ValidationMessage For="@(() => food.ServingSize)" />
    </div>

    <div class="form-group">
        <label for="foodDesc">Description:</label>
        <InputTextArea id="foodDesc" class="form-control" @bind-Value="food.FoodDesc" />
        <ValidationMessage For="@(() => food.FoodDesc)" />
    </div>
    <div class="form-group">
        <label>
            Staff:
        </label>
        <div>
            <InputSelect @bind-Value="food.StaffId" class="form-control">
                <option value="">--Select Staff--</option>
                @if (Staffs != null)
                {
                    foreach (var staff in Staffs)
                    {
                        <option value="@staff.Id">@staff.UserName</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group">
        <label>
            Staff:
        </label>
        <div>
            @* <InputSelect @bind-Value="food.FoodEntryID" class="form-control">
                <option value="">--Select Entry--</option>
                @if (Entries != null)
                {
                    foreach (var entry in Entries)
                    {
                        var customer = Customers.FirstOrDefault(c => c.Id == entry.CustomerID);

                        if(customer != null)
                        {
                            <option value="@entry.Id">@customer.UserName : @entry.Time_Stamp </option>
                        }
                    }
                }
            </InputSelect> *@
        </div>
    </div>
    <button type="submit" class="btn btn-success">@ButtonText</button>
</EditForm>

@code {
    [Parameter] public Food? food { get; set; } = new Food();
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;

    private IList<Customer>? Customers;
    private IList<FoodEntry>? Entries;
    private IList<Staff>? Staffs;
    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Entries = await _client.GetFromJsonAsync<List<FoodEntry>>($"{Endpoints.FoodEntriesEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }
}
