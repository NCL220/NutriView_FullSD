@page "/submitfoodentries"
@using NutriView.Shared.Domain;
@inject HttpClient _client
@inject NavigationManager _navManager
@using NutriView.Client.Pages.FoodEntries_CRUD;
@using NutriView.Client.Pages.Meals_CRUD;
@using NutriView.Client.Pages.EntryLinkFood_CRUD;
@using System.IO;
@layout NoMenuLayout
<head>
    <style>
        

        body{
            
            margin: 0;
            background-color: white; /* Adjust background color as needed */
        }

        .content {
            background-color: #ddd;
            padding: 10px;
            height: 200px; /* Should be removed. Only for demonstration */
        }

        .rounded-div {
            margin-top:3%;
            margin-left:auto;
            margin-right:auto;
            align-items: center;
            width: 80%; /* Adjust width as needed */
            height: auto; /* Adjust height as needed */
            border-radius: 10px; /* Adjust border-radius for rounded corners */
            background-color: #3498db; /* Adjust background color as needed */
            padding: 20px; /* Adjust padding as needed */
            text-align: center;
            color: #fff; /* Adjust text color as needed */
        }

            .Food-Container {
                
                border-block:double;
                height: 200px;
                display: flex;
                flex-wrap: wrap;
                flex-direction: row;
                height: 50vh; /* Adjust the height as needed */
                overflow: auto;
            }

            .Selected-Container {
                background-color:black;
                border-block: double;
                height: 200px;
                display: flex;
                flex-direction: row;
                height: 50vh; /* Adjust the height as needed */
                
            }

        .search-container{
        }
        .FoodButton{
            height:390px;
            width:200px;
            font-size:small;
            flex-direction:row;
            margin:20px;
            border-radius: 20px;
            background: linear-gradient(to right, pink, red);
            color: white;
            outline-offset: 4px;
        }
        .FoodButton:active .front {
            transform: translateY(-2px);
        }
    </style>
</head>

<body>
    <div class="rounded-div">
        <div class="sidenav">
            <input type="text" placeholder="Search..." @bind="searchTerm" />
            <button type="submit"><span class="oi oi-magnifying-glass"></span></button>
        </div>       
        <div>
            <EntryFormComponent ButtonText="" foodEntry="foodEntry" SubmitDataThroughForm=@SubmitDataThroughForm @ref="FoodEntriesComponentRef" />
        </div>
        <div>
            <FormComponent ButtonText="" meal="meal" SubmitDataThroughForm=@SubmitDataThroughForm @ref="MealComponentRef" OnInputChange="HandleMealcaloriechanges" />
        </div>
        <hidden>
            <ELFFormComponent ButtonText="" entryLinkFood="entrylinkfood" SubmitDataThroughForm=@SubmitDataThroughForm @ref="ELFComponentRef" />
        </hidden>
    

    

    <h2>What have you ate?</h2>
    <div class="Food-Container">
        
        @if(foods is not null)
        {
            @foreach (var food in filteredfoods)
            {

                    <button class="FoodButton" @onclick="()=>AddToSelected(food)">
                    <h1>@food.Name</h1>
                        @if (food.Imagebytes != null && food.Imagebytes.Length > 0)
                        {
                            <img src="@($"data:image/png;base64,{Convert.ToBase64String(food.Imagebytes)}")" alt="Image" width="150" height="150" />
                        }
                        else
                        {
                            <p>No image available</p>
                        }
                    <p>Calories : @food.Calories</p>
                    <p>Carbs : @food.Carbohydrates</p>
                    <p>Fats : @food.Fats</p>
                    <p>Food Desc : @food.FoodDesc</p>

                    </button>
            }
        }
    </div>
    

    <div class="Selected-Container">
        @if(foodeaten is not null)
        {
            @foreach (var foodeaten in foodeaten)
            {
                <button class="FoodButton" @onclick="() =>RemoveFromList(foodeaten)">
                    <h1>@foodeaten.Name</h1>
                    <p>X</p>
                </button>
            }
        }
        </div>
        <button class="btn btn-success" @onclick="SubmitForm">Submit Form </button>
    </div>
</body>
@code {
    [Parameter] public bool ApplyCustomerServiceFilter { get; set; } = true;
    [Parameter] public bool SubmitDataThroughForm { get; set; } = true;
    private FoodEntry foodEntry = new FoodEntry();
    private EntryLinkFood entrylinkfood = new EntryLinkFood();
    private IList<Customer> Customers;
    private Meal meal = new Meal();
    private FormComponent MealComponentRef;
    private EntryFormComponent FoodEntriesComponentRef;
    private ELFFormComponent ELFComponentRef;
    private IList<Food> foods;
    private List<Food> foodeaten = new List<Food>();
    private string searchTerm = "";
    private double totalCalinFood = 0;
    private double MealCalorieValues =0;
    


    protected override async Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        foods = await _client.GetFromJsonAsync<List<Food>>($"{Endpoints.FoodsEndpoint}");
    }

    private async Task SubmitForm()
    {
        try
        {
            IList<int> foodeatenids = foodeaten.Select(food => food.Id).ToList();


            var response = await _client.PostAsJsonAsync($"{Endpoints.FoodEntriesEndpoint}", foodEntry);


            if (response.IsSuccessStatusCode)
            {
                var createdFoodEntry = await response.Content.ReadFromJsonAsync<FoodEntry>();
                Console.WriteLine("Selected Food Ids: " + string.Join(", ", foodeatenids));
                if (createdFoodEntry != null)
                {
                    Console.WriteLine($"Created FoodEntry with ID: {createdFoodEntry.Id}");

                    // Use createdFoodEntry.Id as needed
                    int foodEntryIdfromFE = createdFoodEntry.Id;

                    MealComponentRef.meal.FoodEntryID = foodEntryIdfromFE;

                    await _client.PostAsJsonAsync(Endpoints.MealsEndpoint, meal);

                    Console.WriteLine($"Created Meals");

                    foreach(int IndividualFoodEatenId in foodeatenids)
                    {
                        ELFComponentRef.entryLinkFood.FoodEntryID = foodEntryIdfromFE;
                        ELFComponentRef.entryLinkFood.FoodID = IndividualFoodEatenId;
                        await _client.PostAsJsonAsync(Endpoints.EntryLinkFoodsEndpoint, entrylinkfood);
                        Console.WriteLine($"Created FoodEntryLink For FoodId: {IndividualFoodEatenId} ");
                    }
                    _navManager.NavigateTo($"/");
                }
                else
                {
                    Console.WriteLine($"Created FoodEntry is null");
                }
            }
            else
            {
                Console.WriteLine($"Response - null");
            }
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine($"Exception during FoodEntry creation: {ex.Message}");
        }
    }
    private async Task AddToSelected(Food food)
    {
        Console.WriteLine("Added " + food.Name);
        foodeaten.Add(food);

        checkTotalCalories();
    }
    private async Task RemoveFromList(Food food)
    {
        Console.WriteLine("Removed " + food.Name);
        foodeaten.Remove(food);

        checkTotalCalories();
    }

    private List<Food> filteredfoods
    {
        get
        {
            return foods.Where(food => food.Name.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
    }

    private void HandleCheckTotalCalories(ChangeEventArgs ChangeInputs)
    {
        if(double.TryParse(ChangeInputs.Value?.ToString(),out double mealkcal)){
            totalCalinFood = 0;
            IList<double> foodchosenCals = foodeaten.Select(food => food.Calories).ToList();
            foreach (var foodcal in foodchosenCals)
            {
                totalCalinFood = totalCalinFood + foodcal;
            }
            totalCalinFood = totalCalinFood + MealCalorieValues;

            FoodEntriesComponentRef.foodEntry.TotalCalories = totalCalinFood;
        }
    }
    private async Task checkTotalCalories()
    {
        totalCalinFood = 0;
        IList<double> foodchosenCals = foodeaten.Select(food => food.Calories).ToList();
        foreach (var foodcal in foodchosenCals)
        {
            totalCalinFood = totalCalinFood + foodcal;
        }
        totalCalinFood = totalCalinFood + MealCalorieValues;

        FoodEntriesComponentRef.foodEntry.TotalCalories = totalCalinFood;

    }

    private void HandleMealcaloriechanges(double inputmealcalValue)
    {
        MealCalorieValues = inputmealcalValue;
        // Do any other logic you need when the input changes in the child component

        checkTotalCalories();
    }

}